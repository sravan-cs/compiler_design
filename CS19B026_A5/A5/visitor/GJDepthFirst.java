//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   //some useful functions
   public String int_to_string(int n){
      if(n==0){return "0";}
      String ans="";
      while(n>0){
         char c = '0';
         c+=n%10;
         ans=c+ans;
         n/=10;
      }
      return ans;
   }

   public int string_to_int (String s){
      int ans=0;
      for(int i=0;i<s.length();i++){
         ans*=10;
         int temp = s.charAt(i)-'0';
         ans+=temp;
      }
      return ans;
   }

   public void print_begin(String s){
      System.out.println(".text");
      System.out.println(".globl    "+s);
      System.out.println(s+":");
   }

   public void prints(String s){
      System.out.println(s);
   }

   public void print_residue(){
      String temp=".text\n.globl _halloc\n";
      temp +="_halloc:\nli $v0, 9\nsyscall\njr $ra\n.text\n.globl   _print\n_print:\nli $v0, 1\nsyscall\nla $a0, newl\nli $v0, 4\nsyscall\njr $ra\n.data\n.align   0\nnewl:    .asciiz";
      temp+=" \"\\n\"";
      temp+="\n.data";
      temp+="\n.align 0";
      temp+="\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\" ";
      temp+="\n.text\n.globl _exitret\n_exitret:\nli $v0,10 \nsyscall \n.data\n.align 0\n";
      prints(temp);
   }
   // variables added newly

   public int first;
   public int second;
   public int third;
   String from_where;






   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      from_where="";
      print_begin("main");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f =(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s=(String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String t =(String)n.f8.accept(this, argu);
      first=string_to_int(f);
      second=string_to_int(s);
      third=string_to_int(t);
      prints("move $fp, $sp");
      int stack_slots=second+2;
      if(third>4){stack_slots+=third-4;}
      prints("subu $sp, $sp, "+int_to_string(stack_slots*4));
      prints("sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      prints("lw $ra, -4($fp)");
      prints("addu $sp, $sp, "+int_to_string(stack_slots*4));
      prints("jal _exitret");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      print_residue();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      String arg = "stmtlist";
      n.f0.accept(this, (A)arg);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String name = (String) n.f0.accept(this, argu);
      print_begin(name);
      n.f1.accept(this, argu);
      String f = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String t = (String) n.f8.accept(this, argu);
      first=string_to_int(f);
      second=string_to_int(s);
      third=string_to_int(t);
      prints("sw $fp, -8($sp)");
      prints("move $fp, $sp");
      int stack_slots=second+2;
      if(third>4){stack_slots+=third-4;}
      prints("subu $sp, $sp, "+int_to_string(stack_slots*4));
      prints("sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      prints("lw $ra, -4($fp)");
      prints("lw $fp, -8($fp)");
      prints("addu $sp, $sp, "+int_to_string(stack_slots*4));
      prints("jr $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      argu=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      prints("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      prints("la $a0,str_er");
      prints("syscall");
      prints("li $v0, 10");
      prints("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String label = (String)n.f2.accept(this, argu);
      prints("beqz "+reg+" , "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String)n.f1.accept(this, argu);
      prints("b "+label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String)n.f1.accept(this, argu);
      String off=(String)n.f2.accept(this, argu);
      String r2 = (String)n.f3.accept(this, argu);
      prints("sw "+r2+", " +off+" ("+r1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r2 = (String) n.f1.accept(this, argu);
      String r1 = (String)n.f2.accept(this, argu);
      String off=(String)n.f3.accept(this, argu);
      prints("lw "+r2+", " +off+" ("+r1+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r = (String)n.f1.accept(this, argu);
      String exp =(String) n.f2.accept(this, argu);
      if(from_where.equals("halloc")){
         prints("move "+r+" , "+exp);
      }
      else if(from_where.equals("reg")){
         prints("move "+r+" , "+exp);
      }
      else if(from_where.equals("int")){
         prints("li "+r+" , "+exp);
      }
      else if(from_where.equals("label")){
         prints("la "+r+" , "+exp);
      }
      else if(from_where.equals("LE")){
         prints("sle "+r+" , "+exp);
      }
      else if(from_where.equals("DIV")){
         prints("divu "+r+" , "+exp);
      }
      else if(from_where.equals("NE")){
         prints("sne "+r+" , "+exp);
      }
      else if(from_where.equals("PLUS")){
         prints("addu "+r+" , "+exp);
      }
      else if(from_where.equals("TIMES")){
         prints("mul "+r+" , "+exp);
      }
      else if(from_where.equals("MINUS")){
         prints("subu "+r+" , "+exp);
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e = (String )n.f1.accept(this, argu);
      prints("move $a0 , "+e);
      prints("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r = (String) n.f1.accept(this, argu);
      String ar = (String) n.f2.accept(this, argu);
      int slot_no = string_to_int(ar);
      if(first>4){
         int sp_args=first-4;
         if(slot_no<sp_args){
            //if(third>4){slot_no+=third-4;}
            slot_no*=4;
            prints("lw "+r+" , "+int_to_string(slot_no)+"($fp)");
         }
         else{
            slot_no-=sp_args;
            if(third>4){slot_no+=third-4;}
            slot_no*=4;
            prints("lw "+r+" , "+int_to_string(slot_no)+"($sp)");
         }
      }
      else{
         if(third>4){slot_no+=third-4;}
         slot_no*=4;
         prints("lw "+r+" , "+int_to_string(slot_no)+"($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ar =(String)n.f1.accept(this, argu);
      String r =(String)n.f2.accept(this, argu);
      int slot_no = string_to_int(ar);
      if(first>4){
         int sp_args=first-4;
         if(slot_no<sp_args){
            //if(third>4){slot_no+=third-4;}
            slot_no*=4;
            prints("sw "+r+" , "+int_to_string(slot_no)+"($fp)");
         }
         else{
            slot_no-=sp_args;
            if(third>4){slot_no+=third-4;}
            slot_no*=4;
            prints("sw "+r+" , "+int_to_string(slot_no)+"($sp)");
         }
      }
      else{
         if(third>4){slot_no+=third-4;}
         slot_no*=4;
         prints("sw "+r+" , "+int_to_string(slot_no)+"($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String idx =(String)n.f1.accept(this, argu);
      String reg=(String)n.f2.accept(this, argu);
      int id=string_to_int(idx);
      id-=1;
      id*=4;
      prints("sw "+reg+" , "+id+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e =(String)n.f1.accept(this, argu);
      if(from_where.equals("label")){
         prints("jal "+e);
      }
      else{prints("jalr "+e);}
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e =(String)n.f1.accept(this, argu);
      prints("move $a0 , "+e);
      prints("jal _halloc");
      _ret=(R)"$v0";
      from_where="halloc";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String o =(String)n.f0.accept(this, argu);
      String r =(String)n.f1.accept(this, argu);
      String e=(String)n.f2.accept(this, argu);
      String ret=r+" , "+e;
      from_where=o;
      _ret=(R)ret;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String ret=(String)n.f0.accept(this, argu);
      ret="$"+ret;
      _ret=(R)ret;
      from_where="reg";
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      from_where="int";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      String arg = (String ) argu;
      String label = (String)_ret;
      if(argu != null && arg.equals("stmtlist")){
         prints(label+":");
      }
      from_where="label";
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
