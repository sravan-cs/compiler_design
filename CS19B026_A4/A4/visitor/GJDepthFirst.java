//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //


   //some variables and functions required for the assignment 
   public class liveliness {
      public HashMap<Integer,Integer> start=new HashMap<>();
      public HashMap<Integer,Integer> end=new HashMap<>();
      int param_count;
      int max_call_parm_count;
      int call_count;

   }

   public class registers {
      HashMap<Integer,String> regs = new HashMap<>();
      HashMap<Integer,String> spilled_args = new HashMap<>();
      HashMap<Integer,String> pass_args = new HashMap<>();
      int spilled_count;
   }

   public class labels{
      Vector<Integer> live= new Vector<>();
   }

   public HashMap <String,liveliness> live_range = new HashMap<>();
   public HashMap <String,registers> register_map = new HashMap<>();
   public HashMap <String,labels> loops = new HashMap<>();
   public int statement_count;
   public boolean first_time;
   public String curr_method;
   public int temp_count;
   public String from_where;
   public int argc;




   //some useful functions
   public String int_to_string(int n){
      if(n==0){return "0";}
      String ans="";
      while(n>0){
         char c = '0';
         c+=n%10;
         ans=c+ans;
         n/=10;
      }
      return ans;
   }

   public int string_to_int (String s){
      int ans=0;
      for(int i=0;i<s.length();i++){
         ans*=10;
         int temp = s.charAt(i)-'0';
         ans+=temp;
      }
      return ans;
   }

   public void show_map(HashMap<String,liveliness> mp){
       for(Map.Entry<String,liveliness> entry:mp.entrySet()){
          System.out.println(entry.getKey());
         System.out.println("$$$$$start$$$$");
         HashMap<Integer,Integer> m1 = entry.getValue().start;
         for(Map.Entry<Integer,Integer> e:m1.entrySet()){
            System.out.println(e.getKey()+" --> "+e.getValue());
         }
         System.out.println("$$$$$end$$$$");
         HashMap<Integer,Integer> m2 = entry.getValue().end;
         for(Map.Entry<Integer,Integer> e:m2.entrySet()){
            System.out.println(e.getKey()+" --> "+e.getValue());
         }
         System.out.println(entry.getValue().max_call_parm_count);
      }
   }

   public void linear_scan(){
      for(Map.Entry<String,liveliness> e1 : live_range.entrySet()){
         String class_name = e1.getKey();
         int par = e1.getValue().param_count;
         registers r = new registers();
         r.spilled_count=0;
         Stack<String> available_regs = new Stack<>();
         for(int i=9;i>=0;i--){
            available_regs.push("t"+int_to_string(i));
         }
         for(int i=7;i>=0;i--){
            available_regs.push("s"+int_to_string(i));
         }
         if(par>4){
            for(int i=0;i<=3;i++){
               r.regs.put(i,available_regs.pop());
            }
            for(int i=4;i<par;i++){
               r.pass_args.put(i,"SPILLEDARG "+int_to_string(i-4));
               r.spilled_count++;
            }
         }
         else{
            for(int i=0;i<par;i++){
               r.regs.put(i,available_regs.pop());
            }
         }
         if(!class_name.equals("MAIN")){r.spilled_count+=8;}
         

        Vector<Vector<Integer>> sorted_start = new Vector<>(0);

        for(Map.Entry<Integer,Integer> e2 : e1.getValue().start.entrySet()){
           int temp_no = e2.getKey();
           int start_no = e2.getValue();
           int end_no = e1.getValue().end.get(temp_no);
           Vector<Integer> v = new Vector<>();
           v.add(start_no);
           v.add(end_no);
           v.add(temp_no);
           sorted_start.add(v);
        }
        Collections.sort(sorted_start,new Comparator<Vector<Integer>>() {
            @Override
            public int compare(Vector<Integer> o1,Vector<Integer> o2)
            {
               return o1.get(0) - o2.get(0);
            }
        });
        Vector<Vector<Integer>> active = new Vector<>(0);
        
         for(int i=0;i<sorted_start.size();i++){
            for(int j=0;j<active.size();j++){
               if(active.get(j).get(0)>=sorted_start.get(i).get(0)){
                  break;
               }
               else{
                  available_regs.push(r.regs.get(active.get(j).get(2)));
                  active.remove(j);
               }
            }//expire old intervals
            if(available_regs.isEmpty()){
               if(active.get(active.size()-1).get(0)>sorted_start.get(i).get(0)){
                  r.regs.put(sorted_start.get(i).get(2),r.regs.get(active.get(active.size()-1).get(2)));
                  r.spilled_args.put(active.get(active.size()-1).get(2),"SPILLEDARG "+int_to_string(r.spilled_count));
                  r.regs.remove(active.get(active.size()-1).get(2));
                  r.spilled_count++;
                  active.remove(active.size()-1);
                  Vector<Integer> v = new Vector<>();
                  v.add(sorted_start.get(i).get(1));
                  v.add(sorted_start.get(i).get(0));
                  v.add(sorted_start.get(i).get(2));
                  active.add(v);
               }
               else{
                  r.spilled_args.put(sorted_start.get(i).get(2),"SPILLEDARG "+int_to_string(r.spilled_count));
                  r.spilled_count++;
               }
            }//spill
            else{
               r.regs.put(sorted_start.get(i).get(2),available_regs.pop());
               Vector<Integer> v= new Vector<>();
               v.add(sorted_start.get(i).get(1));
               v.add(sorted_start.get(i).get(0));
               v.add(sorted_start.get(i).get(2));
               active.add(v);
            }
            Collections.sort(active,new Comparator<Vector<Integer>>() {
               @Override
               public int compare(Vector<Integer> o1,Vector<Integer> o2)
               {
                  return o1.get(0) - o2.get(0);
               }
           });
         }
         


         register_map.put(class_name, r);
      }
   }

   void show_regs(){
      for(Map.Entry<String,registers> e: register_map.entrySet()){
         System.out.println(e.getKey()+"$$$$$");
         HashMap<Integer,String> r = e.getValue().regs;
         HashMap<Integer,String> s = e.getValue().spilled_args;
         HashMap<Integer,String> p = e.getValue().pass_args;
         for(Map.Entry<Integer,String> e1 : r.entrySet()){
            System.out.println(e1.getKey()+"--->"+e1.getValue());
         }
         for(Map.Entry<Integer,String> e1 : s.entrySet()){
            System.out.println(e1.getKey()+"--->"+e1.getValue());
         }
         for(Map.Entry<Integer,String> e1 : p.entrySet()){
            System.out.println(e1.getKey()+"--->"+e1.getValue());
         }

      }
   }

   void print_label_map(){
      for(Map.Entry<String,labels> e : loops.entrySet()){
         System.out.println(e.getKey());
         for(int i=0;i<e.getValue().live.size();i++){
            System.out.println(e.getValue().live.get(i));
         }
      }
   }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage;  }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      from_where="";
      loops = new HashMap<>();
      R _ret=null;
      first_time=true;
      curr_method="MAIN";
      liveliness temp = new liveliness();
      temp.max_call_parm_count=0;
      temp.param_count=0;
      live_range.put(curr_method, temp);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      //show_map(live_range);
      linear_scan();
      //show_regs();
      //print_label_map();
      first_time=false;
      curr_method="MAIN";
      int calls=live_range.get(curr_method).call_count;
      if(calls!=0){calls=1;}
      System.out.println("MAIN [0]["+int_to_string(register_map.get("MAIN").spilled_count+calls*10)+"]["+int_to_string(live_range.get("MAIN").max_call_parm_count)+"]");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      if(first_time){
         String arg="label";
         n.f0.accept(this, (A)arg);
      }
      if(!first_time){
         String arg="label";
         n.f0.accept(this, (A)arg);
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      if(first_time){
         loops = new HashMap<>();
         statement_count=0;
         String method_name=(String)n.f0.accept(this, argu);
         liveliness temp = new liveliness();
         temp.max_call_parm_count=0;
         temp.param_count=0;
         temp.call_count=0;
         n.f1.accept(this, argu);
         String val = (String)n.f2.accept(this, argu);
         int par_count = string_to_int(val);
         temp.param_count=par_count;
         live_range.put(method_name, temp);
         curr_method=method_name;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){
         curr_method=(String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String first=(String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         int calls=live_range.get(curr_method).call_count;
         if(calls!=0){calls=1;}
         String second = int_to_string( register_map.get(curr_method).spilled_count+calls*10);
         String third=int_to_string( live_range.get(curr_method).max_call_parm_count);
         System.out.println(curr_method+" ["+first+"]["+second+"]["+third+"]");
         int id=live_range.get(curr_method).param_count;
         if(id>4){
            id=id-4;
         }
         else{id=0;}
         for(int i=0;i<8;i++){
            System.out.println("ASTORE SPILLEDARG "+int_to_string(id+i)+" s"+int_to_string(i));
         }
         int temp1=live_range.get(curr_method).param_count;
         if(temp1>4){temp1=4;}
         for(int i=0;i<temp1;i++){
            System.out.println("MOVE "+register_map.get(curr_method).regs.get(i)+" a"+int_to_string(i));
         }
         n.f4.accept(this, argu);
         for(int i=0;i<8;i++){
            System.out.println("ALOAD s" +int_to_string(i)+" SPILLEDARG "+int_to_string(id+i));
         }
         System.out.println("END");
      }
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      if(first_time){
         statement_count++;
         String arg="statement";
         n.f0.accept(this, (A)arg);
      }
      if(!first_time){
         String arg="statement";
         n.f0.accept(this, (A)arg);
      }
      
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      if(first_time){n.f0.accept(this, argu);}
      if(!first_time){
         n.f0.accept(this, argu);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      if(first_time){n.f0.accept(this, argu);}
      if(!first_time){
         n.f0.accept(this, argu);
         System.out.println("ERROR");
      }
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String label=(String)n.f2.accept(this, argu);
         if(loops.containsKey(label)){
            for(int i=0;i<loops.get(label).live.size();i++){
               live_range.get(curr_method).end.put(loops.get(label).live.get(i),statement_count);
            }
         }

      }
      if(!first_time){
         n.f0.accept(this, argu);
         String reg =(String)n.f1.accept(this, argu);
         String label = (String)n.f2.accept(this, argu);
         if(reg.charAt(0)=='S'){
            System.out.println("ALOAD v0 "+reg);
            System.out.println("CJUMP v0 "+label);
         }
         else{
            System.out.println("CJUMP "+reg+" "+label);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         String label=(String)n.f1.accept(this, argu);
         if(loops.containsKey(label)){
            for(int i=0;i<loops.get(label).live.size();i++){
               live_range.get(curr_method).end.put(loops.get(label).live.get(i),statement_count);
            }
         }
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String label=(String)n.f1.accept(this, argu);
         System.out.println("JUMP "+label);
      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String reg1=(String)n.f1.accept(this, argu);
         String offset=(String)n.f2.accept(this, argu);
         String reg2=(String)n.f3.accept(this, argu);
         if(reg1.charAt(0)=='S'){
            System.out.println("ALOAD v0 "+reg1);
            reg1="v0";
         }
         if(reg2.charAt(0)=='S'){
            System.out.println("ALOAD v1 "+reg2);
            reg2="v1";
         }
         System.out.println("HSTORE "+reg1+" "+offset+" "+reg2);
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String reg1=(String)n.f1.accept(this, argu);
         String reg2=(String)n.f2.accept(this, argu);
         String offset=(String)n.f3.accept(this, argu);
         if(reg2.charAt(0)=='S'){
            System.out.println("ALOAD v1 "+reg2);
            reg2="v1";
         }
         if(reg1.charAt(0)=='S'){
            System.out.println("HLOAD v0 "+reg2+ " "+ offset);
            System.out.println("ASTORE "+reg1+" v0");
         }
         else{
            System.out.println("HLOAD "+reg1+" "+reg2+" "+offset);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
    public boolean flag1;
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String reg = (String)n.f1.accept(this, argu);
         flag1=false;
         String exp = (String)n.f2.accept(this, argu);
         String temp="";
         if(reg.charAt(0)=='S'){
            temp=reg;
            reg="v0";
         }
         if(flag1 && from_where.equals("temp")&&exp.charAt(0)=='S'){
            System.out.println("ALOAD v1 "+exp);
            exp="v1";
         }
         System.out.println("MOVE "+reg+" "+exp);
         if(reg.equals("v0")){
            System.out.println("ASTORE "+temp+" "+reg);
         }

      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String exp=(String)n.f1.accept(this, argu);
         if(from_where.equals("temp")){
            if(exp.charAt(0)=='S'){
               System.out.println("ALOAD v0 "+exp);
               exp="v0";
            }
         }
         System.out.println("PRINT "+exp);
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(first_time){n.f0.accept(this, argu);}
      if(!first_time){_ret=n.f0.accept(this, argu);}
      
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      if(first_time){ 
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){ 
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String exp=(String)n.f3.accept(this, argu);
         if(from_where=="temp" && exp.charAt(0)=='S'){
            System.out.println("ALOAD v0 "+exp);
         }
         else{
            System.out.println("MOVE v0 "+exp);
         }
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      if(first_time){
         
         temp_count=0;
         String arg="call";
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, (A)arg);
         n.f4.accept(this, argu);
         if(temp_count>=live_range.get(curr_method).max_call_parm_count){live_range.get(curr_method).max_call_parm_count=temp_count;}
         live_range.get(curr_method).call_count++;
      }
      if(!first_time){
         String arg="call";
         for(int i=0;i<10;i++){
            System.out.println("ASTORE SPILLEDARG "+int_to_string(register_map.get(curr_method).spilled_count+i)+" t"+int_to_string(i));
         }
         n.f0.accept(this, argu);
         String e1 = (String ) n.f1.accept(this, argu);
         argc=0;
         
         n.f2.accept(this, argu);
         n.f3.accept(this, (A)arg);
         n.f4.accept(this, argu);
         if(from_where.equals("temp")&&e1.charAt(0)=='S'){
            System.out.println("ALOAD v1 "+e1);
            e1="v1";
         }
         System.out.println("CALL "+e1);
         _ret=(R)"v0";
         for(int i=0;i<10;i++){
            System.out.println("ALOAD t"+int_to_string(i)+" SPILLEDARG "+int_to_string((register_map.get(curr_method).spilled_count+i)));
         }
         flag1=false;
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String e = (String)n.f1.accept(this, argu);
         String ret="";
         if(from_where.equals("temp") && e.charAt(0)=='S'){
            System.out.println("ALOAD v0 "+e);
            e="v0";
         }
         ret="HALLOCATE "+e;
         _ret=(R)ret;
         flag1=false;
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String op = (String)n.f0.accept(this, argu);
         String e1 = (String)n.f1.accept(this, argu);
         String e2=(String)n.f2.accept(this, argu);
         if(e1.charAt(0)=='S'){
            System.out.println("ALOAD v0 "+e1);
            e1="v0";
         }
         if(from_where.equals("temp")&&e2.charAt(0)=='S'){
            System.out.println("ALOAD v1 "+e2);
            e2="v1";
         }
         String ret=op+" "+e1+" "+e2;
         _ret=(R)ret;
         flag1=false;
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      if(first_time){n.f0.accept(this, argu);}
      if(!first_time){_ret=n.f0.accept(this, argu);}
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      if(first_time){_ret=n.f0.accept(this, argu);}
      if(!first_time){
         _ret=n.f0.accept(this, argu);
         flag1=true;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      if(first_time){
         if(argu!=null){
            String s=(String)argu;
            if(s.equals("call")){temp_count++;}
         }
         n.f0.accept(this, argu);
         String val=(String)n.f1.accept(this, argu);
         int temp_no=string_to_int(val);
         if(live_range.get(curr_method).param_count<=temp_no){
            if(!live_range.get(curr_method).start.containsKey(temp_no)){
               live_range.get(curr_method).start.put(temp_no,statement_count);
            }
            live_range.get(curr_method).end.put(temp_no,statement_count);
         }
         for(Map.Entry<String,labels> entry : loops.entrySet()){
            //System.out.println(entry.getKey()+"-->"+temp_no);
            entry.getValue().live.add(temp_no);
            loops.get(entry.getKey()).live=entry.getValue().live;
         }
         _ret=(R)val;
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String val=(String)n.f1.accept(this, argu);
         int temp_no=string_to_int(val);
         String ret;
         if(register_map.get(curr_method).regs.containsKey(temp_no)){
            ret=register_map.get(curr_method).regs.get(temp_no);
         }
         else if(register_map.get(curr_method).pass_args.containsKey(temp_no)){
            ret=register_map.get(curr_method).pass_args.get(temp_no);
         }
         else{
            ret=register_map.get(curr_method).spilled_args.get(temp_no);
         }
         from_where="temp";
         _ret=(R)ret;
         String arg=(String)argu;
         if(arg!=null && arg.equals("call")){
            if(ret.charAt(0)=='S'){
               System.out.println("ALOAD v1 "+ret);
               ret="v1";
            }
            if(argc<4){
               System.out.println("MOVE a"+int_to_string(argc)+" "+ret);
            }
            else{
               System.out.println("PASSARG "+int_to_string(argc-3)+" "+ret);
            }
            argc++;
         }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      if(first_time){
         _ret=n.f0.accept(this, argu);
      }
      if(!first_time){
         String ret =(String)n.f0.accept(this, argu);
         from_where="integer";
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      if(first_time){
         _ret=n.f0.accept(this, argu);
         String label=(String)_ret;
         String arg= (String)argu;
         if(arg!=null){
            if(arg.equals("label")){
               labels l = new labels();
               loops.put(label,l);
            }
         }  
      }
      if(!first_time){
         String label = (String)n.f0.accept(this, argu);
         String arg=(String)argu;
         if(arg!=null){
            if(arg.equals("label")){
               System.out.println(label);
            }
            
         }
         from_where="label";
         _ret=(R)label;
      }
      return _ret;
   }

}
