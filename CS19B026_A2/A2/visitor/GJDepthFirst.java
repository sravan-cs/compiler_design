//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   //similar to struct in cpp
   public class eachmethod{
      public String name;
      public String accesstype;
      public String returntype;
      public LinkedHashMap<String,String> parameters=new LinkedHashMap<>();
      public HashMap<String,String> variables=new HashMap<>();
   };

   public class eachclass{
      public String name;
      public String parent_name;
      public HashMap<String,String> variables=new HashMap<>();
      public HashMap<String,eachmethod> methods=new HashMap<>();
   };

   //variables used for type checking 
   public  boolean first_time;
   public  HashMap <String,String> mainmap=new HashMap<>();
   public  HashMap <String , eachclass> classes=new HashMap<>();
   public int parameter_id;
   public int parameter_size;

   //for checking if a class is subclass of other
   public boolean suborwot(String child,String parent){
      if(!classes.containsKey(child)){return false;}
      if(child.equals(parent)){return true;}
      while(true){
         if(classes.get(child).parent_name.equals(parent)){return true;}
         if(classes.get(child).parent_name.equals("@none")){break;}
      }
      return false;
   }

   //for returning the lowesst common ancestor of two classes
   public String LCAorwot(String c1,String c2){
      if(c1.equals(c2)){return c1;}
      while(true){
         if(suborwot(c2,c1)){return c1;}
         if(classes.get(c1).parent_name.equals("@none")){break;}
         c1=classes.get(c1).parent_name;
      }
      return "@none";
   }



   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      parameter_id=-1;
      parameter_size=-1;
      R _ret=null;
      first_time=true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      first_time=false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      argu=(A)"+++";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String arg="C";
      n.f0.accept(this, argu);
      String ClassName=(String)n.f1.accept(this, argu);
      arg+=ClassName;
      argu=(A)arg;
      ////////////////////// CLASS DECLARATION /////////////////////////////////////////////////////////////////////
      if(first_time){
         eachclass temp=new eachclass();
         temp.name=ClassName;
         temp.parent_name="@none";
         if(classes.containsKey(ClassName)){
            System.out.println("Type error");
            System.exit(0);
         }
         classes.put(ClassName,temp);
      }
      ////////////////////// CLASS DECLARATION /////////////////////////////////////////////////////////////////////
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)ClassName);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String arg="C";
      n.f0.accept(this, argu);
      String ClassName=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String ParentName=(String)n.f3.accept(this, argu);
      arg+=ClassName;
      argu=(A)arg;
      ////////////////////// CLASS EXTENDS DECLARATION /////////////////////////////////////////////////////////////////////
      if(first_time){
         eachclass temp=new eachclass();
         temp.name=ClassName;
         temp.parent_name=ParentName;
         if(classes.containsKey(ClassName)){
            System.out.println("Type error");
            System.exit(0);
         }
         classes.put(ClassName,temp);
      }
      ////////////////////// CLASS EXTENDS DECLARATION /////////////////////////////////////////////////////////////////////
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, (A)ClassName);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type=(String)n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      String arg=(String)argu;
      String ClassName;
      ////////////////////// VARIABLE DECLARATION /////////////////////////////////////////////////////////////////////
      if(first_time){
         if(arg.charAt(0)=='C'){
            ClassName="";
            for(int i=1;i<arg.length();i++){
               ClassName+=arg.charAt(i);
            }
            HashMap <String,String> varhash=classes.get(ClassName).variables;
            if(varhash.containsKey(id)){
               System.out.println("Type error");
               System.exit(0);
            }
            else{
               varhash.put(id,type);
            }
            classes.get(ClassName).variables=varhash;
         }
         else if(arg.charAt(0)=='M'){
            ClassName="";
            int i=1;
            while(arg.charAt(i)!='*'){
               ClassName+=arg.charAt(i);
               i++;
            }
            i++;
            String MethodName="";
            for(int j=i;j<arg.length();j++){
               MethodName+=arg.charAt(j);
            }
            if(classes.get(ClassName).methods.get(MethodName).parameters.containsKey(id)){
               System.out.println("Type error");
               System.exit(0);
            }
            HashMap<String,String> currmet =classes.get(ClassName).methods.get(MethodName).variables;
            if(currmet.containsKey(id)){
               System.out.println("Type error");
               System.exit(0);
            }
            else{
               currmet.put(id,type);
               classes.get(ClassName).methods.get(MethodName).variables=currmet;
            }
            classes.get(ClassName).methods.get(MethodName).variables=currmet;

         }
      }
      if(!first_time){
         if(!type.equals("int") && !type.equals("@array") && !type.equals("bool")){
            if(!classes.containsKey(type)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      ////////////////////// VARIABLE DECLARATION /////////////////////////////////////////////////////////////////////
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String arg="M";
      String actype=(String)n.f0.accept(this, argu);
      String type=(String)n.f1.accept(this, argu);
      String MethodName=(String)n.f2.accept(this, argu);
      arg+=(String)argu;
      arg+="*";
      arg+=MethodName;
      String ClassName=(String)argu;
      argu=(A)arg;
      ////////////////////// METHOD DECLARATION /////////////////////////////////////////////////////////////////////
      if(first_time){
         eachmethod currmethod=new eachmethod();
         currmethod.accesstype=actype;
         currmethod.name=MethodName;
         currmethod.returntype=type;
         if(classes.containsKey(ClassName)&&classes.get(ClassName).methods.containsKey(MethodName)){
            System.out.println("Type error");
               System.exit(0);
         }
         else{
            if(classes.containsKey(ClassName)){classes.get(ClassName).methods.put(MethodName,currmethod);}
         }
      }
      if(!first_time){
         if(!type.equals("int") && !type.equals("@array") && !type.equals("bool")){
            if(!classes.containsKey(type)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      ////////////////////// METHOD DECLARATION /////////////////////////////////////////////////////////////////////
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String ret_type=(String)n.f10.accept(this, argu);
      if(!first_time){
         if(ret_type.equals("int")||ret_type.equals("bool")||ret_type.equals("@array")){
            if(!ret_type.equals(type)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else{
            if(!suborwot(ret_type,type)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String type=(String)n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      String arg=(String)argu;
      ////////////////////// PARAMETERS /////////////////////////////////////////////////////////////////////
      if(first_time){
         String ClassName="";
         int i=1;
         while(arg.charAt(i)!='*'){
            ClassName+=arg.charAt(i);
            i++;
         }
         i++;
         String MethodName="";
         for(int j=i;j<arg.length();j++){
            MethodName+=arg.charAt(j);
         }
         if(classes.containsKey(ClassName)){
            LinkedHashMap<String,String> currmet;
            currmet=classes.get(ClassName).methods.get(MethodName).parameters;
            if(currmet.containsKey(id)){
               System.out.println("Type error");
               System.exit(0);
            }
            else{
               currmet.put(id,type);
            }
            classes.get(ClassName).methods.get(MethodName).parameters=currmet;
         }
      }
      if(!first_time){
         if(!type.equals("int") && !type.equals("@array") && !type.equals("bool")){
            if(!classes.containsKey(type)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
      ////////////////////// PARAMETERS /////////////////////////////////////////////////////////////////////
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret=(R)"@array";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"public";
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"private";
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"protected";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String arg=(String)argu;
      arg="%"+arg;
      String id=(String)n.f0.accept(this, (A)arg);
      n.f1.accept(this, argu);
      String exp=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!first_time){
         if(id.equals("int")||id.equals("bool")||id.equals("@array")){
            if(!id.equals(exp)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else{
            if(!suborwot(exp,id)){
               if(!id.equals(exp)){
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
         }
         
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String arg="%";
      arg+=(String)argu;
      String ArrName=(String)n.f0.accept(this, (A)arg);
      n.f1.accept(this, argu);
      String pos=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String val=(String)n.f5.accept(this, argu);
      if(!first_time){
         if(!ArrName.equals("@array") || !pos.equals("int") || !val.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String condn=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!first_time){
         if(!condn.equals("bool")){
            System.out.print("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String condn=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!first_time){
         if(!condn.equals("bool")){
            System.out.print("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      String condn=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!first_time){
         if(!condn.equals("bool")){
            System.out.print("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!first_time){
         if(!exp.equals("int")){
            System.out.print("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String arg=(String)argu;
      if(!first_time){
         if(arg.charAt(0)=='!'){
            String temp="";
            int count=0;
            String ClassName="";
            String MethodName="";
            for(int i=1;i<arg.length();i++){
               if(arg.charAt(i)=='^'){count++;}
               else if(count==0){ClassName+=arg.charAt(i);}
               else if(count==1){MethodName+=arg.charAt(i);}
               if(count==2){count=i+1;break;}
            }
            for(int i=count;i<arg.length();i++){
               temp+=arg.charAt(i);
            }
            argu=(A)temp;
         }
      }
      _ret=n.f0.accept(this, argu);
      if(!first_time){
         if(arg.charAt(0)=='!'){
            String temp="";
            int count=0;
            String ClassName="";
            String MethodName="";
            for(int i=1;i<arg.length();i++){
               if(arg.charAt(i)=='^'){count++;}
               else if(count==0){ClassName+=arg.charAt(i);}
               else if(count==1){MethodName+=arg.charAt(i);}
               if(count==2){count=i+1;break;}
            }
            for(int i=count;i<arg.length();i++){
               temp+=arg.charAt(i);
            }
            argu=(A)temp;
            LinkedHashMap<String,String> hm=classes.get(ClassName).methods.get(MethodName).parameters;
            int idx=0;
            for (Map.Entry<String, String> mapElement : hm.entrySet()) {
               idx++;
               if(idx==parameter_id){
                  String ret_type = mapElement.getValue();
                  if(ret_type.equals("int")||ret_type.equals("bool")||ret_type.equals("@array")){
                     if(!ret_type.equals((String)_ret)){
                        System.out.println("Type error");
                        System.exit(0);
                     }
                  }
                  else{
                     if(!suborwot((String)_ret, ret_type)){
                        System.out.println("Type error");
                        System.exit(0);
                     }
                  }
                  
               }
           }
           parameter_id++;
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("bool") || !pe2.equals("bool"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("bool") || !pe2.equals("bool"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("int") || !pe2.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time){
         if(pe1.equals("int") ||pe1.equals("bool")||pe1.equals("@array") ){
            if(!pe1.equals(pe2)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else{
            if(!suborwot(pe1,pe2)||!suborwot(pe2,pe1)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         
      }
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("int") || !pe2.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("int") || !pe2.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("int") || !pe2.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String pe1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pe2=(String)n.f2.accept(this, argu);
      if(!first_time && (!pe1.equals("int") || !pe2.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String id=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String pos=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String arg=(String)argu;
      if(!first_time){
         if(!pos.equals("int")){
            System.out.println("Type error");
            System.exit(0);
         }
         if(!id.equals("@array")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String id=(String)n.f0.accept(this, argu);
      String arg=(String)argu;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(!first_time){
         if(!id.equals("@array")){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String ClassName=(String)n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      String MethodName=(String)n.f2.accept(this, argu);
      if(!first_time){
         String arg=(String)argu;
         if(ClassName.charAt(0)!='$' && !arg.equals("+++")){
            String curr_class="";
            int i=1;
            while(arg.charAt(i)!='*'){
               curr_class+=arg.charAt(i);
               i++;
            }
            if(ClassName.equals(curr_class)){ClassName="$"+ClassName;}
            else{
               while(true){
                  if(classes.get(curr_class).parent_name.equals(ClassName)){ClassName="$"+ClassName;break;}
                  else if(classes.get(curr_class).parent_name.equals("@none")){break;}
                  curr_class=classes.get(curr_class).parent_name;
               }
            }

         }
         if(ClassName.charAt(0)=='$'){
            String temp="";
            for(int i=1;i<ClassName.length();i++){
               temp+=ClassName.charAt(i);
            }
            ClassName=temp;
            boolean flag=false;
            String curr_class="";
            int i=1;
            while(arg.charAt(i)!='*'){
               curr_class+=arg.charAt(i);
               i++;
            }
            while(!flag){
               if(ClassName.equals(curr_class)){
                  if(classes.get(ClassName).methods.containsKey(MethodName)){
                     flag=true;
                     break;
                  }
                  if(classes.get(ClassName).parent_name.equals("@none")){break;}
                  ClassName=classes.get(ClassName).parent_name;
               }
               else{
                  if(classes.get(ClassName).methods.containsKey(MethodName) && !classes.get(ClassName).methods.get(MethodName).accesstype.equals("private")){
                     flag=true;
                     break;
                  }
                  if(classes.get(ClassName).parent_name.equals("@none")){break;}
                  ClassName=classes.get(ClassName).parent_name;
               }
            }
            if(!flag){
               System.out.println("Type error");
               System.exit(0);
            }
            argu=(A)("!"+ClassName+"^"+MethodName+"^"+(String)argu);
            _ret=(R)classes.get(ClassName).methods.get(MethodName).returntype;
         }
         else{
            if(!classes.containsKey(ClassName)){
               System.out.println("Type error");
               System.exit(0);
            }
            if(!classes.get(ClassName).methods.containsKey(MethodName)){
               System.out.println("Type error");
               System.exit(0);
            }
            if(!classes.get(ClassName).methods.get(MethodName).accesstype.equals("public")){
               System.out.println("Type error");
               System.exit(0);
            }
            argu=(A)("!"+ClassName+"^"+MethodName+"^"+(String)argu);
            _ret=(R)classes.get(ClassName).methods.get(MethodName).returntype;
            
         }
      }
      parameter_id=1;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if(!first_time){
         parameter_size=classes.get(ClassName).methods.get(MethodName).parameters.size();
         if(parameter_id!=parameter_size+1){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String t3=(String)n.f4.accept(this, argu);
      if(!first_time){
         if(!t1.equals("bool")){
            System.out.println("Type error");
            System.exit(0);
         }
         if(t2.equals("int") || t2.equals("bool") || t2.equals("@array")){
            if(!t2.equals(t3)){
               System.out.println("Type error");
               System.exit(0);
            }
            _ret=(R)t2;
         }
         else{
            String lca=LCAorwot(t2, t3);
            if(lca.equals("@none")){
               System.out.println("Type error");
               System.exit(0);
            }
            _ret=(R)lca;
         }
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String arg="%";
      arg+=(String)argu;
      _ret=n.f0.accept(this, (A)arg);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      _ret=(R)"bool";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret=(R)n.f0.accept(this, argu);
      if(!first_time){
         String arg=(String)argu;
         if(arg!=null && arg.charAt(0)=='%'){
            String ClassName="";
            int i=2;
            while(i<arg.length() && arg.charAt(i)!='*'){
               ClassName+=arg.charAt(i);
               i++;
            }
            i++;
            String MethodName="";
            for(int j=i;j<arg.length();j++){
               MethodName+=arg.charAt(j);
            }
            String ret=(String)_ret;
            String id=(String)_ret;
            boolean flag=false;
            boolean flag2=true;
            while(!flag||flag2){
               if(flag2){
                  if(classes.get(ClassName).variables.containsKey(id)){
                     flag=true;
                     ret=classes.get(ClassName).variables.get(id);
                  }
                  else if(classes.get(ClassName).methods.get(MethodName).parameters.containsKey(id)){
                     flag=true;
                     ret=classes.get(ClassName).methods.get(MethodName).parameters.get(id);
                  }
                  else if(classes.get(ClassName).methods.get(MethodName).variables.containsKey(id)){
                     flag=true;
                     ret=classes.get(ClassName).methods.get(MethodName).variables.get(id);
                  }
                  if(classes.get(ClassName).parent_name.equals("@none")){break;}
                  else{
                     ClassName=classes.get(ClassName).parent_name;
                  }
               }
               else{

                  if(classes.get(ClassName).variables.containsKey(id)){
                     flag=true;
                     ret=classes.get(ClassName).variables.get(id);
                  }
                  if(classes.get(ClassName).parent_name.equals("@none")){break;}
                  else{
                     ClassName=classes.get(ClassName).parent_name; 
                  }
               }
               flag2=false;
            }
            if(!flag){
               System.out.println("Type error");
               System.exit(0);
            }
            return (R)ret;
         }
      }
      /*if(!first_time){
         String arg=(String)argu;
         if(arg!=null && arg.charAt(0)=='!'){
            System.out.println("here");
         }
      }*/
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!first_time){
         String arg=(String)argu;
         if(arg!=null && arg.charAt(0)=='%'){
            String ClassName="";
            int i=2;
            while(i<arg.length() && arg.charAt(i)!='*'){
               ClassName+=arg.charAt(i);
               i++;
            }
            _ret=(R)ClassName;
         }
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String arg=(String)argu;
      if(!first_time && arg.charAt(0)=='%'){
         String temp="";
         for(int i=1;i<arg.length();i++){
            temp+=arg.charAt(i);
         }
         argu=(A)temp;
      }
      String expr=(String)n.f3.accept(this, argu);
      if(!first_time && !expr.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"@array";
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String arg=(String)argu;
      if(!first_time && arg.charAt(0)=='%'){
         String temp="";
         for(int i=1;i<arg.length();i++){
            temp+=arg.charAt(i);
         }
         argu=(A)temp;
      }
      
      String id=(String)n.f1.accept(this, argu);
      _ret=(R)id;
      if(!first_time && !classes.containsKey(id)){
         System.out.println("Type error");
         System.exit(0);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String arg=(String)argu;
      if(!first_time && arg.charAt(0)=='%'){
         String temp="";
         for(int i=1;i<arg.length();i++){
            temp+=arg.charAt(i);
         }
         argu=(A)temp;
      }
      n.f0.accept(this, argu);
      String expr=(String)n.f1.accept(this, argu);
      if(!first_time && !expr.equals("bool")){
         System.out.println("Type error");
         System.exit(0);
      }
      _ret=(R)"bool";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String arg="";
      String arg2=(String)argu;
      for(int i=1;i<arg2.length();i++){
         arg+=arg2.charAt(i);
      }
      argu=(A)arg;
      _ret=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
