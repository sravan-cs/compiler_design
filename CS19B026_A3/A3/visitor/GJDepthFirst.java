//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   //similar to struct in cpp
   public class eachmethod{
      public String name;
      public String accesstype;
      public String returntype;
      public LinkedHashMap<String,String> parameters=new LinkedHashMap<>();
      public HashMap<String,String> variables=new HashMap<>();
      public HashMap<String,String> local_temp_map=new HashMap<>();
   };

   public class eachclass{
      public String name;
      public String parent_name;
      public HashMap<String,String> variables=new HashMap<>();
      public HashMap<String,eachmethod> methods=new HashMap<>();
   };

   public class offsets{
      public String name;
      public HashMap<String,String> var_offset=new HashMap<>();
      public HashMap<String,String> fun_offset=new HashMap<>();
   }


   //variables used for storing the symbol table
   public  boolean first_time;
   public  HashMap <String,String> mainmap=new HashMap<>();
   public  HashMap <String , eachclass> classes=new HashMap<>();
   public  HashMap <String , offsets> offset_map=new HashMap<>();

   //variables for keeping track of labels and temps

   public int temp_count;
   public int label_count;
   public String par_print;

   //helper functions

   public String int_to_str(int n){
      if(n==0){return "0";}
      String ans="";
      while(n>0){
         char c=(char)(n%10+(int)'0');
         ans=c+ans;
         n/=10;
      }
      return ans;
   }
   public int str_to_int(String s){
      if(s==null){return 0;}
      int ans=0;
      for(int i=0;i<s.length();i++){
         ans*=10;
         ans+=(int)s.charAt(i)-(int)'0';
      }
      return ans;
   }
   public String make_class_record(String class_name){
      int record_size=1;
      int table_size=0;
      String temp=class_name;
      HashMap<String,String> temp_var=new HashMap<>();
      HashMap <String , String > temp_fun=new HashMap<>();
      while(!temp.equals("@none")){
         for(Map.Entry<String,String> entry : classes.get(temp).variables.entrySet()){
            if(!temp_var.containsKey(entry.getKey())){
               temp_var.put(entry.getKey(), "");
               record_size++;
            }
         }
         for(Map.Entry<String,eachmethod> entry : classes.get(temp).methods.entrySet()){
            if(!temp_fun.containsKey(entry.getKey())){
               temp_fun.put(entry.getKey(), "");
               table_size++;
            }
         }
         temp=classes.get(temp).parent_name;
      }
      record_size*=4;
      table_size*=4;
      //creating the class record first
      String temp1="TEMP "+int_to_str(temp_count);
      temp_count++;
      System.out.println("MOVE "+temp1+" HALLOCATE "+int_to_str(record_size));
      //now temp1 has the class record base
      //creating the function table
      String temp2="TEMP "+int_to_str(temp_count);
      temp_count++;
      System.out.println("MOVE "+temp2+" HALLOCATE "+int_to_str(table_size));
      int fun_offset=0;
      int var_offset=4;
      //temp2 has the function table base
      temp=class_name;
      offsets off = new offsets();
      offset_map.put(temp,off);
      while(class_name!="@none"){
         //storing the function addresses in the symbol table
         for (Map.Entry<String,eachmethod> entry : classes.get(class_name).methods.entrySet()) {
            eachmethod met=entry.getValue();
            if(!offset_map.get(temp).fun_offset.containsKey(met.name)){ 
               String temp3="TEMP "+int_to_str(temp_count);
               temp_count++;
               String fn_name=temp+"_"+met.name;
               System.out.println("MOVE "+temp3+" "+fn_name);
               System.out.println("HSTORE "+temp2+" "+int_to_str(fun_offset)+" "+temp3);
            
               offset_map.get(temp).fun_offset.put(met.name,int_to_str(fun_offset));
               fun_offset+=4;
            }
         }
         for (Map.Entry<String,String> entry : classes.get(class_name).variables.entrySet()) {
            String var_name=entry.getKey(); 
            if(!offset_map.get(temp).var_offset.containsKey(var_name)){
               offset_map.get(temp).var_offset.put(var_name,int_to_str(var_offset));
               var_offset+=4;
            }
         }
         class_name=classes.get(class_name).parent_name;
      }
      System.out.println("HSTORE "+temp1+" "+int_to_str(0)+" "+temp2);
      return temp1;
   }
   


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      first_time=true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      first_time=false;
      temp_count=0;
      for(Map.Entry<String,eachclass> entry : classes.entrySet()){
         for(Map.Entry<String,eachmethod> entry2 : entry.getValue().methods.entrySet()){
            if(temp_count<entry2.getValue().parameters.size()){temp_count=entry2.getValue().parameters.size();}
         }
      }
      temp_count+=10;
      for(Map.Entry<String,eachclass> entry : classes.entrySet()){
         for(Map.Entry<String,eachmethod> entry2 : entry.getValue().methods.entrySet()){
            for(Map.Entry<String,String> entry3 : entry2.getValue().variables.entrySet()){
               String temp1="TEMP "+int_to_str(temp_count);
               temp_count++;
               entry2.getValue().local_temp_map.put(entry3.getKey(),temp1);
            }
         }
      }
      for(Map.Entry<String,eachclass> entry5 : classes.entrySet()){
         String class_name=entry5.getKey();
         int fun_offset=0;
         int var_offset=4;
         String temp=class_name;
         offsets off = new offsets();
         offset_map.put(temp,off);
         while(class_name!="@none"){
            for (Map.Entry<String,eachmethod> entry : classes.get(class_name).methods.entrySet()) {
               eachmethod met=entry.getValue();
               if(!offset_map.get(temp).fun_offset.containsKey(met.name)){ 
                  offset_map.get(temp).fun_offset.put(met.name,int_to_str(fun_offset));
                  fun_offset+=4;
               }
            }
            for (Map.Entry<String,String> entry : classes.get(class_name).variables.entrySet()) {
               String var_name=entry.getKey(); 
               if(!offset_map.get(temp).var_offset.containsKey(var_name)){
                  offset_map.get(temp).var_offset.put(var_name,int_to_str(var_offset));
                  var_offset+=4;
               }
            }
            class_name=classes.get(class_name).parent_name;
         }

      }
      label_count=1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(first_time){
         argu=(A)"+++";
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      if(!first_time){
         System.out.println("MAIN");
         String[] arg=new String [10];
         arg[2]="Main";
         argu=(A)arg;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      if(first_time){
         String arg="C";
         n.f0.accept(this, argu);
         String ClassName=(String)n.f1.accept(this, argu);
         arg+=ClassName;
         argu=(A)arg;
         ////////////////////// CLASS DECLARATION /////////////////////////////////////////////////////////////////////
         if(first_time){
            eachclass temp=new eachclass();
            temp.name=ClassName;
            temp.parent_name="@none";
            classes.put(ClassName,temp);
         }
         ////////////////////// CLASS DECLARATION /////////////////////////////////////////////////////////////////////
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, (A)ClassName);
         n.f5.accept(this, argu);
      }
      if(!first_time){
         String[] arg=new String [10];
         arg[2]="ClassDeclaration";
         argu=(A)arg;
         n.f0.accept(this, argu);
         arg[0]=(String)n.f1.accept(this, argu);
         argu=(A)arg;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
   
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      if(first_time){
         String arg="C";
         n.f0.accept(this, argu);
         String ClassName=(String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String ParentName=(String)n.f3.accept(this, argu);
         arg+=ClassName;
         argu=(A)arg;
         ////////////////////// CLASS EXTENDS DECLARATION /////////////////////////////////////////////////////////////////////
         if(first_time){
            eachclass temp=new eachclass();
            temp.name=ClassName;
            temp.parent_name=ParentName;
            classes.put(ClassName,temp);
         }
         ////////////////////// CLASS EXTENDS DECLARATION /////////////////////////////////////////////////////////////////////

         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, (A)ClassName);
         n.f7.accept(this, argu);
      }
      if(!first_time){
         String[] arg=new String [10];
         arg[2]="ClassExtendsDeclaration";
         argu=(A)arg;
         n.f0.accept(this, argu);
         arg[0]=(String)n.f1.accept(this, argu);
         argu=(A)arg;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);

      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if(first_time){
         String type=(String)n.f0.accept(this, argu);
         String id=(String)n.f1.accept(this, argu);
         String arg=(String)argu;
         String ClassName;
         ////////////////////// VARIABLE DECLARATION /////////////////////////////////////////////////////////////////////
         if(first_time){
            if(arg.charAt(0)=='C'){
               ClassName="";
               for(int i=1;i<arg.length();i++){
                  ClassName+=arg.charAt(i);
               }
               HashMap <String,String> varhash=classes.get(ClassName).variables;
               varhash.put(id,type);
               classes.get(ClassName).variables=varhash;
            }
            else if(arg.charAt(0)=='M'){
               ClassName="";
               int i=1;
               while(arg.charAt(i)!='*'){
                  ClassName+=arg.charAt(i);
                  i++;
               }
               i++;
               String MethodName="";
               for(int j=i;j<arg.length();j++){
                  MethodName+=arg.charAt(j);
               }
               HashMap<String,String> currmet =classes.get(ClassName).methods.get(MethodName).variables;
               currmet.put(id,type);
               classes.get(ClassName).methods.get(MethodName).variables=currmet;
               classes.get(ClassName).methods.get(MethodName).variables=currmet;
            }
         }
      
         ////////////////////// VARIABLE DECLARATION /////////////////////////////////////////////////////////////////////
         n.f2.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      if(first_time){
         String arg="M";
         String actype=(String)n.f0.accept(this, argu);
         String type=(String)n.f1.accept(this, argu);
         String MethodName=(String)n.f2.accept(this, argu);
         arg+=(String)argu;
         arg+="*";
         arg+=MethodName;
         String ClassName=(String)argu;
         argu=(A)arg;
         ////////////////////// METHOD DECLARATION /////////////////////////////////////////////////////////////////////
         if(first_time){
            eachmethod currmethod=new eachmethod();
            currmethod.accesstype=actype;
            currmethod.name=MethodName;
            currmethod.returntype=type;
            classes.get(ClassName).methods.put(MethodName,currmethod);
         }
         ////////////////////// METHOD DECLARATION /////////////////////////////////////////////////////////////////////
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
      }
      if(!first_time){
         String [] arg=(String [])argu;
         arg[2]="MethodDeclaration";
         argu=(A)arg;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         arg[1]=(String)n.f2.accept(this, argu);
         String ClassName=arg[0];
         String MethodName=arg[1];
         argu=(A)arg;
         int parameter_count=classes.get(ClassName).methods.get(MethodName).parameters.size();
         System.out.println(ClassName+"_"+MethodName+" ["+int_to_str(parameter_count+1)+"]");
         System.out.println("BEGIN");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         String[] retrn = (String [])n.f10.accept(this, argu);
         System.out.println("RETURN "+retrn[4]);
         System.out.println("END");
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);

      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(first_time){
         String type=(String)n.f0.accept(this, argu);
         String id=(String)n.f1.accept(this, argu);
         String arg=(String)argu;
         ////////////////////// PARAMETERS /////////////////////////////////////////////////////////////////////
         if(first_time){
            String ClassName="";
            int i=1;
            while(arg.charAt(i)!='*'){
               ClassName+=arg.charAt(i);
               i++;
            }
            i++;
            String MethodName="";
            for(int j=i;j<arg.length();j++){
               MethodName+=arg.charAt(j);
            }
            if(classes.containsKey(ClassName)){
               LinkedHashMap<String,String> currmet;
               currmet=classes.get(ClassName).methods.get(MethodName).parameters;
               currmet.put(id,type);
               classes.get(ClassName).methods.get(MethodName).parameters=currmet;
            }
         }
      }
      ////////////////////// PARAMETERS /////////////////////////////////////////////////////////////////////
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      if(first_time){_ret=n.f0.accept(this, argu);}
      if(!first_time){n.f0.accept(this, argu);}
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      if(first_time){_ret=n.f0.accept(this, argu);}
      if(!first_time){n.f0.accept(this, argu);}
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         _ret=(R)"@array";
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         _ret=(R)"bool";
      }
      if(!first_time){
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         _ret=(R)"int";
      }
      if(!first_time){
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         _ret=(R)"public";
      }
      if(!first_time){
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         _ret=(R)"private";
      }
      if(!first_time){
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         _ret=(R)"protected";
      }
      if(!first_time){
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      if(first_time){
         _ret=n.f0.accept(this, argu);
      }
      if(!first_time){
         String [] arg=(String [])argu;
         arg[2]="Statement";
         argu=(A)arg;
         _ret=n.f0.accept(this,argu );
      }
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(!first_time){
         String[] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String [])n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         String [] arg=(String[])argu;
         String class_name=arg[0];
         String method_name=arg[1];
         if(exp1[0].equals("ClassVariable")){
            System.out.println("HSTORE TEMP 0 "+exp1[5]+" "+exp2[4]);
         }
         else{
            System.out.println("MOVE "+exp1[4]+" "+exp2[4]);
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      if(!first_time){
         
         String[] exp1=(String[]) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         String [] exp3=(String [])n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         String [] arg=(String[])argu;
         String class_name=arg[0];
         String method_name=arg[1];
         if(exp1[0].equals("ClassVariable")){
            String temp1="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("HLOAD "+temp1+" TEMP 0 "+exp1[5]);
            String temp2="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("MOVE "+temp2+" PLUS "+exp2[4]+" 1");
            System.out.println("MOVE "+temp2+" TIMES "+temp2+" 4");
            System.out.println("MOVE "+temp1+" PLUS "+temp2+" "+temp1);
            System.out.println("HSTORE "+temp1+" 0 "+" "+exp3[4]);
         }
         else{
            String temp1="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("MOVE "+temp1+" "+exp1[4]);
            String temp2="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("MOVE "+temp2+" PLUS "+exp2[4]+" 1");
            System.out.println("MOVE "+temp2+" TIMES "+temp2+" 4");
            System.out.println("MOVE "+temp1+" PLUS "+temp2+" "+temp1);
            System.out.println("HSTORE "+temp1+" 0 "+" "+exp3[4]);
         }
      }
     
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp=(String[])n.f2.accept(this, argu);
         String condn=exp[4];
         String label1;
         label1="L"+int_to_str(label_count);
         label_count++;
         System.out.println("CJUMP "+condn+" "+label1);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println(label1);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp=(String[])n.f2.accept(this, argu);
         String condn=exp[4];
         String label1;
         String label2;
         label1="L"+int_to_str(label_count);
         label_count++;
         label2="L"+int_to_str(label_count);
         label_count++;
         System.out.println("CJUMP "+condn+" "+label1);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("JUMP "+label2);
         System.out.println(label1);
         System.out.println("NOOP");
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println(label2);
         System.out.println("NOOP");
      }  


      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String label1;
         String label2;
         label1="L"+int_to_str(label_count);
         label_count++;
         label2="L"+int_to_str(label_count);
         label_count++;
         System.out.println(label1);
         System.out.println("NOOP");
         String[] exp=(String[]) n.f2.accept(this, argu);
         String condn=exp[4];
         System.out.println("CJUMP "+condn+" "+label2);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("JUMP "+label1);
         System.out.println(label2);
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String[] exp=(String[])n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("PRINT "+exp[4]);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      if(first_time){n.f0.accept(this, argu);}
      if(!first_time){
         String [] arg=(String [])argu;
         arg[2]="Expression";
         _ret=n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" TIMES "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="bool";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         //temp_val_map.put(temp3,temp_val_map.get(temp1)*temp_val_map.get(temp2));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" PLUS "+temp1+" "+temp2);
         System.out.println("MOVE "+temp3+" NE "+temp3+" 0");
         String [] ret=new String [10];
         ret[1]="bool";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         //temp_val_map.put(temp3,temp_val_map.get(temp1)+temp_val_map.get(temp2));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" LE "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="bool";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         int val;
         //if(temp_val_map.get(temp1)<=temp_val_map.get(temp2)){val=1;}
         //else{val=0;}
         //temp_val_map.put(temp3,val);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" NE "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="bool";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         int val;
         //if(temp_val_map.get(temp1)!=temp_val_map.get(temp2)){val=1;}
         //else{val=0;}
         //temp_val_map.put(temp3,val);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" PLUS "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="int";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         //temp_val_map.put(temp3,temp_val_map.get(temp1)+temp_val_map.get(temp2));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" MINUS "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="int";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" TIMES "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="int";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         //temp_val_map.put(temp3,temp_val_map.get(temp1)*temp_val_map.get(temp2));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         String temp1=exp1[4];
         String temp2=exp2[4];
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" DIV "+temp1+" "+temp2);
         String [] ret=new String [10];
         ret[1]="int";
         ret[3]="Expression";
         ret[4]=temp3;
         _ret=(R)ret;
         //temp_val_map.put(temp3,temp_val_map.get(temp1)+temp_val_map.get(temp2));
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(!first_time){
         String[] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String[] exp2=(String[])n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         String temp1="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp1+" PLUS "+exp2[4]+" 1");
         System.out.println("MOVE "+temp1+" TIMES "+temp1+" 4");
         System.out.println("MOVE "+temp1+" PLUS "+temp1+" "+exp1[4]);
         System.out.println("HLOAD "+temp3+" "+temp1+" 0");
         String [] ret=new String [10];
         ret[4]=temp3;
         ret[1]="int";
         ret[3]="ArrayLookup";
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         String[] exp=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String[] ret=new String [10];
         ret[1]="int";
         ret[3]="Length";
         String temp="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("HLOAD "+temp+" "+exp[4]+" 0");
         ret[4]=temp;
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      if(!first_time){
         String[] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] arg=(String [])argu;
         arg[2]="MessageSend";
         String exp2=(String)n.f2.accept(this, (A)arg);
         par_print="";
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         String temp1="TEMP "+int_to_str(temp_count);
         temp_count++;
         String class_name=exp1[1];
         String MethodName=exp2;
         System.out.println("HLOAD "+temp1+" "+exp1[4]+" 0");//temp 1 has the function table address 
         String temp2="TEMP "+int_to_str(temp_count);
         temp_count++;
         String offset=offset_map.get(class_name).fun_offset.get(MethodName);
         System.out.println("HLOAD "+temp2+" "+temp1+" "+offset);
         String temp3="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp3+" CALL "+temp2+" ( "+exp1[4]+" "+par_print+")");
         String [] ret=new String [10] ;
         ret[4]=temp3;
         ret[3]="MessageSend";
         ret[1]=classes.get(class_name).methods.get(MethodName).returntype;
         _ret=(R)ret;
         par_print="";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String [] exp2=(String[])n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         String [] exp3=(String[])n.f4.accept(this, argu);
         String t1=exp1[4];
         String t2=exp2[4];
         String t3=exp3[4];
         String label1;
         String label2;
         label1="L"+int_to_str(label_count);
         label_count++;
         label2="L"+int_to_str(label_count);
         label_count++;
         String temp1="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("CJUMP "+t1+" "+label1);
         System.out.println("MOVE "+temp1+" "+t2);
         System.out.println("JUMP "+label2);
         System.out.println(label1);
         System.out.println("NOOP");
         System.out.println("MOVE "+temp1+" "+t3);
         System.out.println(label2);
         System.out.println("NOOP");
         String [] ret=new String [10];
         ret[4]=temp1;
         ret[3]="TernaryExpression";
         ret[1]=exp2[1];
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(!first_time){
         String [] exp1=(String[])n.f0.accept(this, argu);
         par_print+=exp1[4]+" ";
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String [] exp1=(String[])n.f1.accept(this, argu); 
         par_print+=exp1[4]+" ";
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
      }
      if(!first_time){
         String[] exp1=(String[])n.f0.accept(this, argu);
         String temp1 ="";
         String [] ret=new String [10];
         String [] arg=(String[])argu;
         String class_name=arg[0];
         String method_name=arg[1];
         if(exp1[3].equals("Integer")){
            ret[1]="int";
            temp1="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("MOVE "+temp1+" "+exp1[6]);
            ret[6]=exp1[6];
         }
         else if(exp1[3].equals("Boolean")){
            ret[1]="bool";
            temp1="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("MOVE "+temp1+" "+exp1[6]);
            ret[6]=exp1[6];
         }
         else if(exp1[3].equals("Identifier") && exp1[0].equals("ClassVariable")){
            ret[1]=exp1[1];
            temp1="TEMP "+int_to_str(temp_count);
            temp_count++;
            System.out.println("HLOAD "+temp1+" TEMP 0 "+exp1[5]);
            ret[0]="ClassVariable";
            ret[2]=exp1[2];
         }
         else{
            temp1=exp1[4];
            ret[1]=exp1[1];
            ret[6]=exp1[6];
         }
         
         ret[3]="PrimaryExpression";
         ret[4]=temp1;
         
         _ret=(R)ret;

      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
      }
      if(!first_time){
         String val=(String)n.f0.accept(this, argu);
         String [] ret=new String[10];
         ret[1]="int";
         ret[3]="Integer";
         ret[6]=val;
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String [] ret=new String[10];
         ret[1]="bool";
         ret[3]="Boolean";
         ret[6]="1";
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String [] ret=new String[10];
         ret[1]="bool";
         ret[3]="Boolean";
         ret[6]="0";
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      if(first_time){
         _ret=n.f0.accept(this, argu);
      }
      if(!first_time){
         String id=(String)n.f0.accept(this, argu);
         String [] arg=(String [])argu;
         if(arg[2].equals("Statement") || arg[2].equals("Expression")){
            String ret[] = new String [10];
            ret[3]="Identifier";
            ret[2]=id;
            String ClassName=arg[0];
            String MethodName=arg[1];
            if(offset_map.get(ClassName).var_offset.containsKey(id)){
               ret[0]="ClassVariable";
               ret[5]=offset_map.get(ClassName).var_offset.get(id); 
               String temp_name=ClassName;
               while(!temp_name.equals("@none")){
                  if(classes.get(temp_name).variables.containsKey(id)){
                     ret[1]=classes.get(temp_name).variables.get(id);
                     break;
                  }
                  temp_name=classes.get(temp_name).parent_name;
               }
            
            }
            else if(classes.get(ClassName).methods.get(MethodName).local_temp_map.containsKey(id)){
               ret[0]="LocalVariable";
               ret[4]=classes.get(ClassName).methods.get(MethodName).local_temp_map.get(id);
               ret[1]=classes.get(ClassName).methods.get(MethodName).variables.get(id);
            }
            else {
               ret[0]="Parameter";
               int j=1;
               for(Map.Entry<String,String> entry:classes.get(ClassName).methods.get(MethodName).parameters.entrySet()){
                  if(id.equals(entry.getKey()) ){
                     ret[1]=entry.getValue();
                     break;
                  }
                  j++;
               }
               String temp1="TEMP ";
               temp1+=int_to_str(j);
               ret[4]=temp1;
            }
            _ret=(R)ret;
         }
         else{
            _ret=(R)id;
         }
         
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String [] ret=new String[10];
         ret[3]="This";
         ret[4]="TEMP 0";
         String[] arg=(String [])argu;
         ret[1]=arg[0];
         ret[2]="this";
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this,argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String [] exp=(String[])n.f3.accept(this, argu);
         n.f4.accept(this,argu);
         String [] ret=new String[10];
         ret[3]="ArrayAllocation";
         ret[1]="@array";
         String temp1="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp1+" PLUS "+exp[4]+" 1");
         String temp2="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp1+" TIMES "+temp1+" 4");
         System.out.println("MOVE "+temp2+" HALLOCATE "+temp1);
         System.out.println("HSTORE "+temp2+" 0 "+exp[4]);
         ret[4]=temp2;
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      if(!first_time){
         String [] arg=(String []) argu;
         arg[2]="Allocation";
         argu=(A)arg;
         n.f0.accept(this, argu);
         String id=(String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         String [] ret=new String[10];
         ret[3]="Allocation";
         ret[1]=id;
         ret[4]=make_class_record(id);
         _ret=(R)ret;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         String[] exp=(String[])n.f1.accept(this, argu);
         String temp1="TEMP "+int_to_str(temp_count);
         temp_count++;
         System.out.println("MOVE "+temp1+" NE "+exp[4]+" 1");
         exp[4]=temp1;
         _ret=(R)exp;
         /*if(temp_val_map.get(exp[4])==1){
            temp_val_map.put(temp1,0);
         }
         else{temp_val_map.put(temp1,1);}*/
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      if(first_time){
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      if(!first_time){
         n.f0.accept(this, argu);
         _ret=n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
